package accounts

import "github.com/NordGus/fnncr/internal/adapters/primary/web/app/views/components/buttons"
import "github.com/NordGus/fnncr/internal/adapters/primary/web/app/views/components/inputs"
import "github.com/NordGus/fnncr/internal/adapters/primary/web/app/views/components"
import "time"
import "fmt"
import "github.com/NordGus/fnncr/internal/adapters/primary/web/app/views/applets"

type CapitalAccountForm struct {
	ActionURL string
	ID        string

	Name string

	IsSavings bool

	Currency   string
	Currencies [][2]string

	Description string

	InitialBalance struct {
		Amount int64
		At     time.Time
	}

	IsArchived bool
	DeleteURL  string
}

templ capitalAccountForm(f CapitalAccountForm) {
	<form hx-put={ f.ActionURL } class={ "flex flex-col gap-8" }>
		<div
			class={
				"py-1.5 px-4",
				"rounded-lg border-neutral-500 border-button",
				"flex gap-4 items-start",
			}
		>
			<div class="flex-1">
				@inputs.PlainInputComponent(
					inputs.Input{
						Type:  "text",
						Name:  "name",
						Value: f.Name,
					},
				)
			</div>
			@buttons.FormSubmit("save", false, false)
		</div>
		<section class="flex flex-col gap-1 px-2">
			<div
				class={
					"flex gap-4",
					"rounded-lg",
					"hover:bg-neutral-200 dark:hover:bg-neutral-700",
				}
			>
				@inputs.PlainLabelComponent(
					inputs.Label{
						For:  "savings",
						Text: "is a savings account?",
					},
				)
				@inputs.CheckboxComponent(
					inputs.Checkbox{
						ID:      "savings",
						Name:    "savings",
						Value:   "is_savings",
						Checked: f.IsSavings,
					},
				)
			</div>
			<div class="flex justify-between gap-4">
				@inputs.PlainLabelComponent(
					inputs.Label{
						For:      "currency",
						Text:     "currency",
						IsInline: true,
					},
				)
				@inputs.PlainSelectComponent(
					inputs.Select{
						Name:     "currency",
						Value:    f.Currency,
						Options:  f.Currencies,
						IsInline: true,
					},
				)
			</div>
			<div>
				@inputs.PlainLabelComponent(
					inputs.Label{
						For:  "description",
						Text: "description",
					},
				)
				<div class="pl-2">
					@inputs.PlainTextareaComponent(
						inputs.Textarea{
							Name:        "description",
							Value:       f.Description,
							Placeholder: "add a simple description",
						},
					)
				</div>
			</div>
		</section>
		<section class="flex flex-col gap-1 px-2">
			@components.Heading4("initial balance", true)
			<div class="flex justify-between gap-4">
				@inputs.PlainLabelComponent(
					inputs.Label{
						For:      "initial_balance[amount]",
						Text:     "amount",
						IsInline: true,
					},
				)
				@inputs.PlainInputComponent(
					inputs.Input{
						Type:     "text",
						Name:     "initial_balance[amount]",
						Value:    fmt.Sprintf("%d", f.InitialBalance.Amount),
						IsInline: true,
					},
				)
			</div>
			<div class="flex justify-between gap-4">
				@inputs.PlainLabelComponent(
					inputs.Label{
						For:      "initial_balance[at]",
						Text:     "at",
						IsInline: true,
					},
				)
				@inputs.PlainDateComponent(
					inputs.Date{
						Name:     "initial_balance[at]",
						Value:    f.InitialBalance.At.Format("2006-01-02"),
						IsInline: true,
					},
				)
			</div>
		</section>
		if f.DeleteURL != "" {
			<section class="flex flex-col gap-1 px-2">
				<div
					class={
						"flex gap-4",
						"rounded-lg",
						"hover:bg-neutral-200 dark:hover:bg-neutral-700",
					}
				>
					@inputs.PlainLabelComponent(
						inputs.Label{
							For:  "archive",
							Text: "account is archive?",
						},
					)
					@inputs.CheckboxComponent(
						inputs.Checkbox{
							Name:    "archive",
							Value:   "is_archived",
							Checked: f.IsArchived,
						},
					)
				</div>
				@buttons.ActionWithTarget(
					"delete account",
					f.DeleteURL,
					fmt.Sprintf("#%v", applets.DashboardActionTargetID),
				)
			</section>
		}
	</form>
}
